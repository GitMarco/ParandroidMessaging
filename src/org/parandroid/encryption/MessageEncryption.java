package org.parandroid.encryption;

import java.io.IOException;
import java.security.GeneralSecurityException;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;

import android.content.Context;

/**
 * Wrapper class to encrypt and decrypt messages, using the underlying factory
 */
public abstract class MessageEncryption {
	
	/**
	 * Encrypt a message using AES with a secrey key, generated by the Diffie-Hillman algorithm
	 * with our private key and the receiver's public key. The keys need to be stored locally.
	 * 
	 * @param context
	 * @param number
	 * @param text
	 * @return encrypted message
	 * @throws GeneralSecurityException
	 * @throws IOException - Key(s) missing
	 */
	public static byte[] encrypt(Context context, String number, String text) throws GeneralSecurityException, IOException{
		SecretKey secretKey = MessageEncryptionFactory.getSecretKey(context, number);
		
		Cipher cipher = Cipher.getInstance(MessageEncryptionFactory.SECRET_KEY_ALGORITHM);
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);

        byte[] cipherText = cipher.doFinal(text.getBytes());
		
		return cipherText;
	}	
	
	
	/**
	 * Decrypt a message using AES with a secrey key, generated by the Diffie-Hillman algorithm
	 * with our private key and the receiver's public key. The keys need to be stored locally.
	 * 
	 * @param context
	 * @param number
	 * @param cipherText
	 * @return decrypted message
	 * @throws GeneralSecurityException
	 * @throws IOException - Key(s) missing
	 */
	public static String decrypt(Context context, String number, byte[] cipherText) throws GeneralSecurityException, IOException{		
		SecretKey secretKey = MessageEncryptionFactory.getSecretKey(context, number);
		
		Cipher cipher = Cipher.getInstance(MessageEncryptionFactory.SECRET_KEY_ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        
        byte[] text = cipher.doFinal(cipherText);

		return new String(text);
	}
}
